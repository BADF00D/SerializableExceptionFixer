<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ThrowsDeprecatedDescription" xml:space="preserve">
    <value>Throws is deprecated, catch Exception yourself is recommended.</value>
  </data>
  <data name="AsyncVoidIsDeprectedDescription" xml:space="preserve">
    <value>NUnit3 does not allow async void test methods, use async Task instead. </value>
  </data>
  <data name="AsyncVoidIsDeprectedMessageFormat" xml:space="preserve">
    <value>Async void is not allowed. use async Task instead.</value>
  </data>
  <data name="AnalyzerTitle" xml:space="preserve">
    <value>Deprecated</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="ExpectedExceptionDeprecatedDescription" xml:space="preserve">
    <value>ExpectedExceptionAttribute is deprecated and will be removed in NUnit3. User Asser.ShouldThrow&lt;Exception&gt; instead.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="ExpectedExceptionDeprecatedMessageFormat" xml:space="preserve">
    <value>ExpectedExceptionAttribute is deprecated</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="ThrowsDeprecatedMessageFormat" xml:space="preserve">
    <value>Throws is deprecated</value>
  </data>
  <data name="String" xml:space="preserve">
    <value>ThrowsDeprecatedDescription</value>
  </data>
  <data name="ReferencedFieldInTestCasesSourceIsNotStaticDescription" xml:space="preserve">
    <value>NUnit3 does not support TestCaseSource that are instance members.</value>
  </data>
  <data name="ReferencedFieldInTestCasesSourceIsNotStaticMessageFormat" xml:space="preserve">
    <value>Referenced TestCaseSource has to be static</value>
  </data>
  <data name="ReferencedMethodInTestCasesSourceIsNotStaticDescription" xml:space="preserve">
    <value>NUnit3 does not support TestCaseSource that are instance members.</value>
  </data>
  <data name="ReferencedMethodInTestCasesSourceIsNotStaticMessageFormat" xml:space="preserve">
    <value>Referenced TestCaseSource has to be static</value>
  </data>
  <data name="ReferencedPropertyInTestCasesSourceIsNotStaticDescription" xml:space="preserve">
    <value>NUnit3 does not support TestCaseSource that are instance members.</value>
  </data>
  <data name="ReferencedPropertyInTestCasesSourceIsNotStaticMessageFormat" xml:space="preserve">
    <value>Referenced TestCaseSource has to be static</value>
  </data>
  <data name="TestFixtureOnAbstractClassIsUselessDescription" xml:space="preserve">
    <value>Abstract classes will not be run by NUnit, so this attribute can be removed</value>
  </data>
  <data name="TestFixtureOnAbstractClassIsUselessMessageFormat" xml:space="preserve">
    <value>TestFixture on abstract class is useless.</value>
  </data>
  <data name="ReferencedMemberDoesNotExistsDescription" xml:space="preserve">
    <value>TestCaseSource references a memeber that does not exists</value>
  </data>
  <data name="ReferencedMemberDoesNotExistsXMessageFormat" xml:space="preserve">
    <value>Missing member {0}</value>
  </data>
  <data name="SerializableAttributeMissingDescription" xml:space="preserve">
    <value>Desc -  Attribute missing</value>
  </data>
  <data name="SerializableAttributeMissingMessageFormat" xml:space="preserve">
    <value>MEssageFormat -  Attribute missing</value>
  </data>
  <data name="SerializableAttributeMissingTitle" xml:space="preserve">
    <value>Title -  Attribute missing</value>
  </data>
  <data name="ParameterlessConstructorMissingDescription" xml:space="preserve">
    <value>Parameterless ctor missing desc</value>
  </data>
  <data name="ParameterlessConstructorMissingMessageFormat" xml:space="preserve">
    <value>You should implement a parameterless constructor.</value>
  </data>
  <data name="ParameterlessConstructorMissingTitle" xml:space="preserve">
    <value>Parameterless contructor missing</value>
  </data>
  <data name="StringConstructorMissingDescription" xml:space="preserve">
    <value>You should implement a constructor that accepts a string. desc</value>
  </data>
  <data name="StringConstructorMissingMessageFormat" xml:space="preserve">
    <value>You should implement a constructor that accepts a string.</value>
  </data>
  <data name="StringConstructorMissingTitle" xml:space="preserve">
    <value>Constructor that accepts string is missing</value>
  </data>
  <data name="StringAndExceptionConstructorMissingDescription" xml:space="preserve">
    <value>You should implement a constructor that accepts a string and exception. desc</value>
  </data>
  <data name="StringAndExceptionConstructorMissingMessageFormat" xml:space="preserve">
    <value>You should implement a constructor that accepts a string and exception.</value>
  </data>
  <data name="StringAndExceptionConstructorMissingTitle" xml:space="preserve">
    <value>Constructor that accepts string and Exception is missing.</value>
  </data>
  <data name="SerializationInfoAndStreamingContextConstructorMissingDescription" xml:space="preserve">
    <value>Constructor that accepts SerializationInfo and StreamingContext is missing.</value>
  </data>
  <data name="SerializationInfoAndStreamingContextConstructorMissingMessageFormat" xml:space="preserve">
    <value>You should implement a constructor that accepts a SerializationInfo and StreamingContext.</value>
  </data>
  <data name="SerializationInfoAndStreamingContextConstructorMissingTitle" xml:space="preserve">
    <value>Constructor that accepts SerializationInfo and StreamingContext is missing.</value>
  </data>
  <data name="ExceptionsSuffixDescription" xml:space="preserve">
    <value>Its recommended that each Exception ends with Exception</value>
  </data>
  <data name="ExceptionsSuffixMessageFormat" xml:space="preserve">
    <value>Custom Exceptions should end with Exception</value>
  </data>
  <data name="ExceptionsSuffixMissingTitle" xml:space="preserve">
    <value>Should be named *Exception</value>
  </data>
</root>